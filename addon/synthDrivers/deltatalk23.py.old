import os
import ctypes
from synthDriverHandler import SynthDriver, VoiceInfo
import queue

class DeltaTalkSynthDriver(SynthDriver):
    name = "deltatalk"
    description = "Micropower DeltaTalk TTS"
    
    # Carregar a DLL do DeltaTalk
    dll_path = os.path.join(os.path.dirname(__file__), 'deltatalk', 'Dtalk32t.dll')
    deltatalk = ctypes.WinDLL(dll_path)

    # Definir protótipos de função
    deltatalk.TTSENG_Init.argtypes = [ctypes.c_bool, ctypes.c_void_p, ctypes.c_int]
    deltatalk.TTSENG_Init.restype = ctypes.c_int

    deltatalk.TTSENG_SetVoice.argtypes = [ctypes.c_int, ctypes.c_int, ctypes.c_int]
    deltatalk.TTSENG_SetVoice.restype = ctypes.c_int

    deltatalk.TTSENG_SetProsodyOptions.argtypes = [ctypes.c_int, ctypes.c_int, ctypes.c_int, ctypes.c_int, ctypes.c_int]
    deltatalk.TTSENG_SetProsodyOptions.restype = ctypes.c_int

    deltatalk.TTSENG_SetMode.argtypes = [ctypes.c_int, ctypes.c_int, ctypes.c_int, ctypes.c_int]
    deltatalk.TTSENG_SetMode.restype = ctypes.c_int

    deltatalk.TTSENG_PlayText.argtypes = [ctypes.c_int, ctypes.c_char_p, ctypes.c_int]
    deltatalk.TTSENG_PlayText.restype = ctypes.c_int

    deltatalk.TTSENG_StopText.argtypes = [ctypes.c_int]
    deltatalk.TTSENG_StopText.restype = ctypes.c_int

    deltatalk.TTSENG_PauseText.argtypes = [ctypes.c_int]
    deltatalk.TTSENG_PauseText.restype = ctypes.c_int

    deltatalk.TTSENG_ResumeText.argtypes = [ctypes.c_int]
    deltatalk.TTSENG_ResumeText.restype = ctypes.c_int

    def __init__(self):
        super(DeltaTalkSynthDriver, self).__init__()
        self.instance = self.deltatalk.TTSENG_Init(True, None, 16000)
        self.voice = 0  # VOICE_MASC1
        self.vocal_tract = 0
        self.rate = 100
        self.volume = 100
        self.pitch = 100
        self.queue = queue.Queue()
        self._isSpeaking = False
        self.setVoice(self.voice, self.vocal_tract)
        self.setProsody(self.rate, self.volume, self.pitch)

    def terminate(self):
        self.deltatalk.TTSENG_StopText(self.instance)

    def speak(self, speechSequence):
        self._isSpeaking = True
        for item in speechSequence:
            if isinstance(item, str):
                self.deltatalk.TTSENG_PlayText(self.instance, item.encode('utf-8'), 0)
            elif isinstance(item, dict):
                if 'pitch' in item:
                    self.setProsody(pitch=item['pitch'])
                if 'rate' in item:
                    self.setProsody(rate=item['rate'])
                if 'volume' in item:
                    self.setProsody(volume=item['volume'])
        self._isSpeaking = False

    def setVoice(self, voice, vocal_tract):
        self.deltatalk.TTSENG_SetVoice(self.instance, voice, vocal_tract)

    def setProsody(self, rate=100, volume=100, pitch=100):
        self.rate = rate
        self.volume = volume
        self.pitch = pitch
        self.deltatalk.TTSENG_SetMode(self.instance, rate, volume, pitch)

    def pause(self):
        self.deltatalk.TTSENG_PauseText(self.instance)

    def resume(self):
        self.deltatalk.TTSENG_ResumeText(self.instance)

    def cancel(self):
        self.deltatalk.TTSENG_StopText(self.instance)
        self.queue.queue.clear()
        self._isSpeaking = False

    def isSpeaking(self):
        return self._isSpeaking

    def getAvailableVoices(self):
        voices = [
            VoiceInfo(
                id='VOICE_MASC1',
                name='DeltaTalk - Marcelo',
                lang='pt-BR'
            ),
            VoiceInfo(
                id='VOICE_MASC2',
                name='DeltaTalk - José',
                lang='pt-BR'
            ),
            VoiceInfo(
                id='VOICE_FEM1',
                name='DeltaTalk - Paula',
                lang='pt-BR'
            ),
        ]
        return voices

    def getVoice(self):
        return self.voice

    def getRate(self):
        return self.rate

    def getVolume(self):
        return self.volume

    def getPitch(self):
        return self.pitch
