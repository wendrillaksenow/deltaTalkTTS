# synthDrivers/deltatalk.py
# A part of NonVisual Desktop Access (NVDA)
# Copyright (C) 2006-2014 NV Access Limited
# This file is covered by the GNU General Public License.
# See the file COPYING for more details.

import synthDriverHandler
import speech
from synthDriverHandler import SynthDriver, VoiceInfo, synthIndexReached, synthDoneSpeaking
from ctypes import *
import os.path
import threading
import time
import _thread
from time import sleep

from speech.commands import (
    IndexCommand,
    PitchCommand,
    RateCommand,
    VolumeCommand,
)

class DeltaTalkSynthDriver(synthDriverHandler.SynthDriver):
    """DeltaTalk Synthesizer driver for NVDA."""
    name = "deltatalk"
    # Translators: Description for a speech synthesizer for NVDA.
    description = _("Micropower DeltaTalk TTS")

    VOICES = {
        "Masculina 1 (16 kHz)": 0,
        "Masculina 2 (22 kHz)": 1,
        "Feminina 1 (22 kHz)": 2,
    }

    @classmethod
    def check(cls):
        dtPath = os.path.abspath(os.path.join(os.path.dirname(__file__), r"deltatalk", r"Dtalk32t.dll"))
        return os.path.exists(dtPath)

    supportedSettings = [
        SynthDriver.PitchSetting(),
        SynthDriver.RateSetting(),
        SynthDriver.VolumeSetting(),
        SynthDriver.VoiceSetting(),
    ]

    supportedCommands = {
        IndexCommand,
        PitchCommand,
        RateCommand,
        VolumeCommand,
    }

    supportedNotifications = {synthIndexReached, synthDoneSpeaking}

    def __init__(self):
        self._rate = 70
        self._pitch = 50
        self._volume = 100
        self._voice = self.VOICES["Masculina 1 (16 kHz)"]
        self._lastIndex = 0

        dtPath = os.path.abspath(os.path.join(os.path.dirname(__file__), r"deltatalk", r"Dtalk32t.dll"))
        if not os.path.exists(dtPath):
            raise RuntimeError("DeltaTalk DLL n√£o encontrada no caminho especificado.")
        
        self.dt = windll.LoadLibrary(dtPath)
        self.dt.TTSENG_Init(False, None, 16000 if self._voice == 0 else 22050)
        self.dt.TTSENG_SetVoice(self._voice)
        self.dt.TTSENG_SetPitch(self._pitch)
        self.dt.TTSENG_SetRate(self._rate)
        self.dt.TTSENG_SetVolume(self._volume)

    def speak(self, speechSequence):
        self._lastIndex = 0
        s = ""
        chpitch = False
        for item in speechSequence:
            if isinstance(item, str):
                s += " " + item
            elif isinstance(item, IndexCommand):
                self._lastIndex = item.index
            elif isinstance(item, PitchCommand):
                if not chpitch:
                    chpitch = True
                    self.dt.TTSENG_SetPitch(int(self._pitch * item.multiplier))
            elif isinstance(item, RateCommand):
                self.dt.TTSENG_SetRate(item.rate)
            elif isinstance(item, VolumeCommand):
                self.dt.TTSENG_SetVolume(item.volume)

        if s:
            self.dt.TTSENG_PlayText(s.strip().encode())
        self.dt.TTSENG_SetPitch(self._pitch)
        _thread.start_new_thread(self._speechMonitor, (self._lastIndex, 0.1,))

    def cancel(self):
        self.dt.TTSENG_StopText()

    def _get_rate(self):
        return self._rate

    def _get_index(self):
        return self._lastIndex

    def _set_rate(self, value):
        self._rate = int(value)
        self.dt.TTSENG_SetRate(self._rate)

    def _get_pitch(self):
        return self._pitch

    def _set_pitch(self, value):
        self._pitch = int(value)
        self.dt.TTSENG_SetPitch(self._pitch)

    def _get_volume(self):
        return self._volume

    def _set_volume(self, value):
        self._volume = int(value)
        self.dt.TTSENG_SetVolume(self._volume)

    def _get_voice(self):
        return self._voice

    def _set_voice(self, value):
        self._voice = self.VOICES.get(value, 0)
        self.dt.TTSENG_SetVoice(self._voice)
        self.dt.TTSENG_Init(False, None, 16000 if self._voice == 0 else 22050)

    def _speechMonitor(self, idx, delay):
        while self.dt.TTSENG_IsSpeaking():
            time.sleep(delay)
        if idx != 0:
            synthIndexReached.notify(synth=self, index=idx)
        else:
            synthDoneSpeaking.notify(synth=self)

    @property
    def availableVoices(self):
        return [
            VoiceInfo(
                id=str(index),
                name=name,
                languages=["pt"],
                gender=speech.Gender.MALE if "Masculina" in name else speech.Gender.FEMALE,
                age=speech.Age.ADULT
            )
            for name, index in self.VOICES.items()
        ]

def getSynthList():
    return [DeltaTalkSynthDriver]
